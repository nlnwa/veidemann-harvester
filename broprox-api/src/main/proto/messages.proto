syntax = "proto3";

package broprox;
option java_package = "no.nb.nna.broprox.model";
//option java_multiple_files = true;
option java_outer_classname = "MessagesProto";

import "google/protobuf/timestamp.proto";
import "config.proto";

message CrawlExecutionStatus {
    enum State {
        UNDEFINED = 0;
        CREATED = 1;
        FETCHING = 2;
        SLEEPING = 3;
        FINISHED = 4;
        ABORTED_TIMEOUT = 5;
        ABORTED_SIZE = 6;
        ABORTED_MANUAL = 7;
        FAILED = 8;
        DIED = 9;
    }

    string id = 1;
    State state = 2;
    string job_id = 3;
    string seed_id = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    int64 documents_crawled = 7;
    int64 bytes_crawled = 8;
    int64 uris_crawled = 9;
    int64 documents_failed = 10;
    CrawlScope scope = 11;
}

message CrawlLog {
    string warc_id = 1;
    google.protobuf.Timestamp time_stamp = 2;
    string surt = 3;
    int32 status_code = 4;
    int64 size = 5;
    string requested_uri = 6;
    string response_uri = 7;

    /**
     * Get the discoveryPath,
     *  R - Redirect
     *  E - Embed
     *  X - Speculative embed (aggressive/Javascript link extraction)
     *  L - Link
     *  P - Prerequisite (as for DNS or robots.txt before another URI)
     */
    string discovery_path = 8;
    string referrer = 9;
    string content_type = 10;
    google.protobuf.Timestamp fetch_time_stamp = 11;
    int64 fetch_time_ms = 12;
    string block_digest = 13;
    string payload_digest = 14;
    string storage_ref = 15;
    string record_type = 16;
    string warc_refers_to = 17;
    string ip_address = 18;
    string execution_id = 19;
    int32 retries = 20; // Number of times this uri has been retried. Zero means success on first attempt.
    FetchError error = 21; // Contains the error reason if fetch failed
}

message CrawledContent {
    string digest = 1;
    string warc_id = 2;
}

message ExtractedText {
    string warc_id = 1;
    string text = 2;
    int64 sentence_count = 3;
    int64 word_count = 4;
    int64 long_word_count = 5;
    int64 character_count = 6;
    int64 lix = 7;
    string language = 8;
}

message CrawlHostGroup {
    string id = 1; // SHA-1 hash of uri or crawlgroup config id
    string politeness_id = 2; // The politeness config this group is valid for
    google.protobuf.Timestamp next_fetch_time = 3; // The earliest time a URI from this group might be fetched
    bool busy = 4; // True if crawler is busy with fetching a URI from this group
}

message FetchError {
    int32 code = 1;
    string msg = 2;
}

message QueuedUri {
    string id = 1;
    string execution_id = 2;
    google.protobuf.Timestamp discovered_time_stamp = 3;
    // Sequence number to order the fetch of uris from a seed
    int64 sequence = 4;
    string uri = 5;
    string surt = 6;
    string ip = 7;

    /**
     * Get the discoveryPath,
     *  R - Redirect
     *  E - Embed
     *  X - Speculative embed (aggressive/Javascript link extraction)
     *  L - Link
     *  P - Prerequisite (as for DNS or robots.txt before another URI)
     */
    string discovery_path = 8;
    string referrer = 9;
    repeated Cookie cookies = 10;
    int64 page_fetch_time_ms = 11; // The time used to fetch and render the the uri including dependencies
    int32 retries = 12; // Number of times this uri has been scheduled for retry.
    google.protobuf.Timestamp earliest_fetch_time_stamp = 13; // Do not fetch this uri before this time
    string crawl_host_group_id = 14; // The Crawl Host Group calculated for this uri
    string politeness_id = 15; // Id of the politeness config used when discovering this uri
    FetchError error = 16; // Contains the error reason if fetch failed
}

message Cookie {
    // Cookie name.
    string name = 1;
    // Cookie value.
    string value = 2;
    // Cookie domain.
    string domain = 3;
    // Cookie path.
    string path = 4;
    // Cookie expiration date as the number of seconds since the UNIX epoch.
    double expires = 5;
    // Cookie size.
    int32 size = 6;
    // True if cookie is http-only.
    bool http_only = 7;
    // True if cookie is secure.
    bool secure = 8;
    // True in case of session cookie.
    bool session = 9;
    // Cookie SameSite type.
    string same_site = 10;
}

message Screenshot {
    string id = 1;
    string execution_id = 2;
    string uri = 3;
    bytes img = 4;
}
